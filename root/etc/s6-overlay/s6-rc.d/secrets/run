#!/usr/bin/with-contenv bash

# Function to log debugging information
log_debug_info() {
  if [ "${DEBUG_SECRETS}" = "true" ] || [ "${DEBUG_SECRETS}" = "1" ]; then
    echo "DEBUG: $1"
  fi
}

# Path to the environment file
ENV_FILE="/etc/s6-overlay/env/cron-env"

# Create or clear the environment file
> "$ENV_FILE"

# Array to store debug information
declare -a debug_info

# Loop through all environment variables that start with 'BORG' or 'YOUR'.
for var_name in $(set | grep -E '^BORG|^YOUR' | awk -F= '{print $1}'); do
  # Retrieve the current value of each environment variable.
  var_value=$(eval echo \$$var_name)

  # Check if the variable's name ends with '_FILE'.
  if [[ "$var_name" =~ _FILE$ ]]; then
    # Strip the '_FILE' suffix to obtain the corresponding variable name.
    original_var_name=${var_name%_FILE}

    # Retrieve the value of the original environment variable, if it exists.
    original_var_value=$(eval echo \$$original_var_name)

    # Ensure the *_FILE variable is valid, and the referenced file exists and is not empty.
    if [ -n "$var_value" ] && [ -s "$var_value" ]; then
      # Notify user if original variable is being overwritten.
      if [ -n "$original_var_value" ]; then
        debug_info+=("Note: $original_var_name was already set but is being overwritten by $var_name")
      fi

      # Update the original variable with the content of the file.
      var_content=$(cat "$var_value")
      export "$original_var_name"="$var_content"
      debug_info+=("Setting $original_var_name from the content of $var_value")

      # Add the variable to the environment file
      echo "export $original_var_name=\"$var_content\"" >> "$ENV_FILE"

      # Unset the *_FILE environment variable.
      unset "$var_name"
      debug_info+=("Unsetting $var_name")

      # Add the final value of the original variable
      debug_info+=("$original_var_name is now set to: $var_content")
    else
      # Issue an error if the *_FILE variable is not properly set, or the file does not exist or is empty.
      debug_info+=("Error: File $var_value does not exist or is empty.")
    fi
  else
    # Directly add non-_FILE variables to the environment file
    echo "export $var_name=\"$var_value\"" >> "$ENV_FILE"
    # Add debug info for non-_FILE variables
    debug_info+=("Variable $var_name is set to: \"$var_value\"")
  fi
done

# Output all debug information at once
if [ "${DEBUG_SECRETS}" = "true" ] || [ "${DEBUG_SECRETS}" = "1" ]; then
  echo "Debug Information:"
  for info in "${debug_info[@]}"; do
    echo "$info"
  done
fi